{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAEPC,mBAAS,IAFF,mBAEpCC,EAFoC,KAExBC,EAFwB,KAqB3C,OACI,0BAAMC,SAdW,SAAAC,GAEjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,YCNlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACpC,OACI,yBAAKC,UAAU,wCACX,yBAAKC,IAAMF,EAAMG,IAAKJ,IACtB,2BAAIA,K,uBCLHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,0FAE4EO,UAAWF,GAFvF,sBAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXvB,kBAcZY,GAdY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAa,IAAD,EAIXrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IANwB,mBAI9BC,EAJ8B,KAIvBC,EAJuB,KAsBrC,OAbAC,qBAAW,WAEPjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAItB,CAACb,IAGGc,EDnByBK,CAAanB,GAAhCU,EAFsB,EAE5BJ,KAAcO,EAFc,EAEdA,QAIrB,OACI,oCACI,4BAAKb,GAEJa,GAAW,sCACZ,yBAAKjB,UAAU,aAIPc,EAAOF,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACQW,IAAOX,EAAIhB,IACPgB,UEarBY,EA/BM,WAAM,IAAD,EAGc1C,mBAAU,CAAC,cAHzB,mBAGf2C,EAHe,KAGH5C,EAHG,KAUtB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ4C,EAAWd,KAAI,SAAAR,GAAQ,OAEnB,kBAAC,EAAD,CACIoB,IAAMpB,EACNA,SAAaA,UCpBzCuB,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ebafa7ae.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) =>{\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = e =>{\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e =>{\r\n\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories( cats => [inputValue ,...cats ])\r\n            setinputValue('')\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate_animated animate_bounce\">\r\n            <img src={ url } alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async(category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=z81qkwb6SXbdL46DE2Hd3loJtAJ5kYpb&q=${encodeURI( category)}&limit=10`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n/* import {getGifs} from '../helpers/getGifs'\r\n */\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images ,loading} = useFetchGifs(category)\r\n\r\n    \r\n \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Loading</p>}\r\n            <div className=\"card-grid\">\r\n    \r\n                    {\r\n                    \r\n                    images.map( (img) => \r\n                        <GifGridItem \r\n                                key = {img.id}\r\n                                {...img}\r\n                        />\r\n                        )\r\n                    }\r\n    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n\r\n    }, [category])\r\n \r\n\r\n    return state\r\n\r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n\r\n    const [categories, setCategories] = useState( ['One Punch'] )\r\n    \r\n    /* const handleAdd = () =>{\r\n\r\n        setcategories([...categories, 'Hunter X Hunter'])\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        \r\n                        <GifGrid\r\n                            key={ category } \r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'animate.css'\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render(\n\n    <GifExpertApp/>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}